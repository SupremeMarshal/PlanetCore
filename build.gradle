buildscript {
    dependencies {
        classpath group: 'org.spongepowered', name: 'mixingradle', version: "0.7.+"
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '6.+'
    id 'wtf.gofancy.fancygradle' version '1.1.+'
}

// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'org.spongepowered.mixin'
apply from: 'mixinLoadingHacks.gradle'

version = project.property('mod_version')
group = project.property('mod_id')
archivesBaseName = project.property('mod_id')

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

fancyGradle {
    patches {
        resources
        coremods
        asm
    }
}

idea {
    module {
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
        inheritOutputDirs = true
        downloadJavadoc = true
        downloadSources = true
    }
}

minecraft {
    mappings channel: 'stable', version: '39-1.12'
    runs {
        create("client") {
            property("forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP")
            property("forge.logging.console.level", "debug")
        }
        create("server") {
            property("forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP")
            property("forge.logging.console.level", "debug")
        }
    }
}

repositories {
    mavenCentral()
    maven {
        name = "CurseForge Maven" //Base
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url = 'https://repo.spongepowered.org/maven' }
    maven {
        name = 'sonatype-nexus'
        url = 'https://oss.sonatype.org/content/repositories/public/'
    }
    maven { //needed for CubicWorldGen
        name = "JitPack"
        url = "https://jitpack.io/"
    }

    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

}

dependencies {
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    minecraft("net.minecraftforge:forge:1.12.2-14.23.5.2860")
    implementation "org.spongepowered:mixin:0.8.5"
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"

    compileOnly('org.spongepowered:noise:2.0.0-SNAPSHOT')
    implementation 'org.jetbrains:annotations:20.1.0'

    implementation fg.deobf("curse.maven:hackForMixinFMLAgent_deobfedDeps_-223896:2680892")
    implementation fg.deobf ("com.github.OpenCubicChunks:CubicChunks:c4696fdd5e") {
        transitive = false
    }
    implementation fg.deobf ("com.github.OpenCubicChunks:CubicWorldGen:974add4") {
        transitive = false
    }
    implementation fg.deobf("curse.maven:GeckoLib-388172:4020277") {
        transitive = false
    }

    // compile against the JEI API but do not include it at runtime
    //compileOnly fg.deobf("mezz.jei:jei_${mc_version}:${jei_version}:api")
    // at runtime, use the full JEI jar
    implementation fg.deobf("mezz.jei:jei_${mc_version}:${jei_version}")
}

mixin {
    //disableAnnotationProcessorCheck()
    add sourceSets.main, "planetcore.refmap.json"
    config "mixins.planetcore.json"
    debug.verbose = true
}

processResources {
    duplicatesStrategy = 'include'
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title": "planetcore",
                "Specification-Vendor": "Planet Core",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"planetcore",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "FMLCorePlugin": "com.PlanetCore.asm.PlanetCoreFMLLoadingPlugin",
                "FMLCorePluginContainsFMLMod": "false",
                "ForceLoadAsMod": "true",
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": "0",
                "MixinConfigs": "mixins.planetcore.json"
        ])
    }
}

jar.finalizedBy('reobfJar')
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}